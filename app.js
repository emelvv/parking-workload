// –û–±–Ω–æ–≤–∏—Ç–µ –ø—É—Ç—å, —á—Ç–æ–±—ã –æ–Ω —É–∫–∞–∑—ã–≤–∞–ª –Ω–∞ –≤–∞—à –±—ç–∫–µ–Ω–¥.
const API_ENDPOINT = '/api/parking/load';
const REQUEST_METHOD = 'POST';

const form = document.getElementById('lookup-form');
const input = document.getElementById('parking-number');
const errorField = document.getElementById('lookup-error');
const card = document.getElementById('status-card');

const STATUS_PRESETS = {
  low: {
    label: '–°–≤–æ–±–æ–¥–Ω–æ',
    cssClass: 'status-card--success',
    emoji: 'üü¢',
  },
  medium: {
    label: '–ü–ª–æ—Ç–Ω–æ',
    cssClass: 'status-card--warning',
    emoji: 'üü°',
  },
  high: {
    label: '–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ',
    cssClass: 'status-card--danger',
    emoji: 'üî¥',
  },
  unknown: {
    label: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
    cssClass: 'status-card--warning',
    emoji: '‚ö™Ô∏è',
  },
};

form?.addEventListener('submit', async (event) => {
  event.preventDefault();
  clearError();

  const rawValue = input.value.trim();
  if (!/^\d{3,}$/.test(rawValue)) {
    showError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ –º–∏–Ω–∏–º—É–º —Ç—Ä—ë—Ö —Ü–∏—Ñ—Ä.');
    return;
  }

  await requestStatus(rawValue);
});

function showError(message) {
  errorField.textContent = message;
  errorField.hidden = false;
}

function clearError() {
  errorField.hidden = true;
  errorField.textContent = '';
}

async function requestStatus(parkingNumber) {
  toggleForm(false, '–ó–∞–ø—Ä–æ—Å‚Ä¶');
  renderLoading();

  try {
    const response = await fetch(API_ENDPOINT, {
      method: REQUEST_METHOD,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ parkingNumber }),
    });

    if (!response.ok) {
      throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ${response.status}`);
    }

    const payload = await response.json();
    const normalized = normalizePayload(payload, parkingNumber);
    renderStatus(normalized);
  } catch (err) {
    console.error(err);
    renderErrorState(err);
  } finally {
    toggleForm(true);
  }
}

function toggleForm(isEnabled, loadingText) {
  input.disabled = !isEnabled;
  const submitButton = form.querySelector('.lookup__submit');
  submitButton.disabled = !isEnabled;
  if (!isEnabled) {
    submitButton.dataset.originalText = submitButton.textContent;
    submitButton.textContent = loadingText ?? '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶';
  } else if (submitButton.dataset.originalText) {
    submitButton.textContent = submitButton.dataset.originalText;
    delete submitButton.dataset.originalText;
  }
}

function renderLoading() {
  card.innerHTML = `
    <div class="status-card">
      <div class="status-card__placeholder">
        <span class="status-card__emoji" aria-hidden="true">‚è≥</span>
        <p class="status-card__text">–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏‚Ä¶</p>
      </div>
    </div>
  `;
}

function renderErrorState(error) {
  card.innerHTML = `
    <div class="status-card status-card--danger">
      <div class="status-card__placeholder">
        <span class="status-card__emoji" aria-hidden="true">‚ö†Ô∏è</span>
        <p class="status-card__text">${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'}</p>
      </div>
    </div>
  `;
}

function renderStatus(data) {
  const badge = STATUS_PRESETS[data.statusPreset] ?? STATUS_PRESETS.unknown;

  const statsHtml = [
    {
      label: '–ó–∞–Ω—è—Ç–æ',
      value: formatNumber(data.occupiedSpots, '--'),
    },
    {
      label: '–°–≤–æ–±–æ–¥–Ω–æ',
      value: formatNumber(data.freeSpots, '--'),
    },
    {
      label: '–í—Å–µ–≥–æ –º–µ—Å—Ç',
      value: formatNumber(data.totalSpots, '--'),
    },
    {
      label: '–ó–∞–≥—Ä—É–∑–∫–∞',
      value: data.occupancyPercent != null ? `${data.occupancyPercent}%` : '--',
    },
  ]
    .filter((stat) => stat.value !== '--' || stat.label === '–ó–∞–≥—Ä—É–∑–∫–∞')
    .map(
      (stat) => `
        <div class="status-card__stat">
          <span class="status-card__stat-label">${stat.label}</span>
          <span class="status-card__stat-value">${stat.value}</span>
        </div>
      `,
    )
    .join('');

  card.innerHTML = `
    <div class="status-card ${badge.cssClass}">
      <div class="status-card__header">
        <div>
          <p class="status-card__badge">${badge.emoji} ${badge.label}</p>
          <h2 class="status-card__title">–ü–∞—Ä–∫–æ–≤–∫–∞ ‚Ññ${data.parkingNumber}</h2>
          <p class="status-card__subtitle">${data.humanStatus}</p>
        </div>
        <div class="status-card__meta">
          ${data.updatedAtText ? `<span class="status-card__meta-time">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.updatedAtText}</span>` : ''}
        </div>
      </div>

      <div class="status-card__progress" role="img" aria-label="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å ${data.occupancyPercent ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}%">
        <div class="status-card__progress-fill" style="width: ${Math.min(data.occupancyPercent ?? 0, 100)}%"></div>
      </div>

      <div class="status-card__stats">
        ${statsHtml}
      </div>

      <footer class="status-card__footer">
        ${data.updatedAtRelative ? `–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: ${data.updatedAtRelative}` : '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π API.'}
      </footer>
    </div>
  `;
}

function normalizePayload(payload, fallbackParkingNumber) {
  const raw = payload?.data ?? payload;

  if (!raw || typeof raw !== 'object') {
    throw new Error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.');
  }

  const total = coerceNumber(
    raw.totalSpots ?? raw.total ?? raw.capacity ?? raw.maxCapacity,
  );
  const occupied = coerceNumber(
    raw.occupiedSpots ?? raw.occupied ?? raw.busy ?? raw.taken,
  );
  const free = coerceNumber(
    raw.freeSpots ?? raw.free ?? raw.available ?? raw.vacant,
  );

  let occupancyPercent = null;
  if (raw.occupancy != null) {
    occupancyPercent = normalizePercent(raw.occupancy);
  }
  if (occupancyPercent == null && raw.occupancyPercent != null) {
    occupancyPercent = normalizePercent(raw.occupancyPercent);
  }
  if (occupancyPercent == null && occupied != null && total != null && total > 0) {
    occupancyPercent = Math.round((occupied / total) * 100);
  }
  if (occupancyPercent == null && free != null && total != null && total > 0) {
    occupancyPercent = Math.round(((total - free) / total) * 100);
  }

  let resolvedOccupied = occupied;
  let resolvedFree = free;

  if (resolvedOccupied == null && total != null && free != null) {
    resolvedOccupied = Math.max(total - free, 0);
  }

  if (resolvedFree == null && total != null && occupied != null) {
    resolvedFree = Math.max(total - occupied, 0);
  }

  const statusRaw = (raw.status ?? raw.state ?? '').toString().toLowerCase();
  const statusPreset = chooseStatusPreset(statusRaw, occupancyPercent);
  const humanStatus = formatHumanStatus(statusRaw, statusPreset, occupancyPercent);

  const updatedAt = raw.updatedAt ?? raw.timestamp ?? raw.lastUpdated;

  return {
    parkingNumber: raw.parkingNumber ?? raw.zone ?? fallbackParkingNumber,
    totalSpots: total ?? null,
    occupiedSpots: resolvedOccupied ?? null,
    freeSpots: resolvedFree ?? (total != null && resolvedOccupied != null ? Math.max(total - resolvedOccupied, 0) : null),
    occupancyPercent: occupancyPercent ?? null,
    statusPreset,
    humanStatus,
    updatedAtText: updatedAt ? formatDate(updatedAt) : '',
    updatedAtRelative: updatedAt ? formatRelativeTime(updatedAt) : '',
  };
}

function chooseStatusPreset(statusRaw, occupancyPercent) {
  if (statusRaw.includes('free') || statusRaw.includes('–Ω–∏–∑')) return 'low';
  if (statusRaw.includes('mid') || statusRaw.includes('—Å—Ä–µ–¥')) return 'medium';
  if (statusRaw.includes('high') || statusRaw.includes('–ø–µ—Ä–µ–ø–æ–ª–Ω') || statusRaw.includes('–∑–∞–∫—Ä—ã')) return 'high';

  if (typeof occupancyPercent === 'number') {
    if (occupancyPercent < 60) return 'low';
    if (occupancyPercent < 85) return 'medium';
    return 'high';
  }

  return 'unknown';
}

function formatHumanStatus(statusRaw, preset, percent) {
  if (statusRaw) {
    return capitalize(statusRaw);
  }

  switch (preset) {
    case 'low':
      return percent != null ? `–°–≤–æ–±–æ–¥–Ω–æ ¬∑ ${percent}% –∑–∞–Ω—è—Ç–æ` : '–ü–∞—Ä–∫–æ–≤–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞';
    case 'medium':
      return percent != null ? `–ü–ª–æ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ¬∑ ${percent}% –∑–∞–Ω—è—Ç–æ` : '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è';
    case 'high':
      return percent != null ? `–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ ¬∑ ${percent}% –∑–∞–Ω—è—Ç–æ` : '–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –ø–æ—á—Ç–∏ –Ω–µ—Ç';
    default:
      return '–°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞';
  }
}

function normalizePercent(value) {
  if (value == null) return null;

  if (typeof value === 'number' && Number.isFinite(value)) {
    return clamp(Math.round(value <= 1 ? value * 100 : value), 0, 100);
  }

  const numeric = parseFloat(String(value).replace(',', '.'));
  if (!Number.isNaN(numeric)) {
    const scaled = numeric <= 1 ? numeric * 100 : numeric;
    return clamp(Math.round(scaled), 0, 100);
  }
  return null;
}

function coerceNumber(value) {
  if (value == null) return null;
  const number = Number(value);
  return Number.isFinite(number) ? number : null;
}

function formatNumber(value, fallback = '') {
  if (value == null) return fallback;
  return new Intl.NumberFormat('ru-RU').format(value);
}

function formatDate(input) {
  const date = toDate(input);
  if (!date) return '';
  return date.toLocaleString('ru-RU', {
    day: '2-digit',
    month: 'short',
    hour: '2-digit',
    minute: '2-digit',
  });
}

function formatRelativeTime(input) {
  const date = toDate(input);
  if (!date) return '';
  const diffMs = Date.now() - date.getTime();
  const diffMinutes = Math.round(diffMs / 60000);
  if (diffMinutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
  if (diffMinutes < 60) return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
  const diffHours = Math.round(diffMinutes / 60);
  if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
  const diffDays = Math.round(diffHours / 24);
  return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
}

function toDate(value) {
  if (value instanceof Date) return value;
  const parsed = new Date(value);
  return Number.isNaN(parsed.getTime()) ? null : parsed;
}

function clamp(value, min, max) {
  return Math.min(Math.max(value, min), max);
}

function capitalize(text) {
  if (!text) return '';
  return text.charAt(0).toUpperCase() + text.slice(1);
}
