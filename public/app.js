/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
 * –û–±–Ω–æ–≤–∏—Ç–µ API_ENDPOINT, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ–Ω —É–∫–∞–∑—ã–≤–∞–ª –Ω–∞ –≤–∞—à –±—ç–∫–µ–Ω–¥.
 */
const API_ENDPOINT = '/api/parking/load';
const REQUEST_METHOD = 'POST';

const STATUS_PRESETS = {
  low: { label: '–°–≤–æ–±–æ–¥–Ω–æ', cssClass: 'status-card--success', emoji: 'üü¢' },
  medium: { label: '–ü–ª–æ—Ç–Ω–æ', cssClass: 'status-card--warning', emoji: 'üü°' },
  high: { label: '–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ', cssClass: 'status-card--danger', emoji: 'üî¥' },
  unknown: { label: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', cssClass: 'status-card--warning', emoji: '‚ö™Ô∏è' },
};

const HACK_CONFIG = {
  appId: 'ru.2gishackathon.app03.01',
  key: 'e50d3992-8076-47d8-bc3c-9add5a142f20',
};

// –í—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∂–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
  // –ù–æ–¥—ã —Ñ–æ—Ä–º—ã/–∏–Ω–ø—É—Ç–∞/–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—â–µ–º –∏—Ö (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
  const form = document.getElementById('lookup-form');
  const input = document.getElementById('parking-number');
  const errorField = document.getElementById('lookup-error');
  const card = document.getElementById('status-card');
  const mapContainer = document.getElementById('map-container');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã MapGL ‚Äî —Å–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É –∏ –≤–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫–∏
  let map = null;
  try {
    map = new mapgl.Map('map', {
      center: [37.618423, 55.751244], // [lng, lat]
      zoom: 12,
      key: HACK_CONFIG.key,
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ mapgl:', err);
  }

  // –•—Ä–∞–Ω–∏–º –º–∞—Ä–∫–µ—Ä—ã, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è
  const markers = [];
  // –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã —Å –∫–∞—Ä—Ç—ã
  function clearMarkers() {
	  while (markers.length) {
		const marker = markers.pop();
		try {
		  if (marker && typeof marker.destroy === 'function') {
			marker.destroy();
		  } else if (marker && typeof marker.remove === 'function') {
			marker.remove();
		  } else {
			if (marker && marker.getElement && typeof marker.getElement === 'function') {
			  const el = marker.getElement();
			  if (el && el.parentNode) el.parentNode.removeChild(el);
			}
		  }
		} catch (err) {
		  console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞:', err);
		}
	  }
	}


  let latestNearestParking = null;
  let latestEpoData = null;

  if (map && mapContainer) {
    const resizeMethods = ['invalidateSize', 'updateSize', 'resize'];
    for (const method of resizeMethods) {
      if (typeof map[method] === 'function') {
        try { map[method](); } catch (err) { console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã:', err); }
        break;
      }
    }
  }

  // --- UI / —Ñ–æ—Ä–º–∞ ---
  if (form && input) {
    form.addEventListener('submit', async (event) => {
      event.preventDefault();
      clearError();

      const rawValue = input.value.trim();
      const coords = parseCoordinates(rawValue);
      if (!coords) {
        showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞".');
        return;
      }

      const [latCoord, lngCoord] = coords;

      if (input) toggleForm(false, '–ò—â–µ–º...');

      try {
        if (map && typeof map.setCenter === 'function') {
          try {
            map.setCenter([lngCoord, latCoord], { easing: 'easeOutCubic', duration: 500 });
            map.setZoom(16, { easing: 'easeOutCubic', duration: 500 });
          } catch (err) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É:', err);
          }
        }

        await get_park_on_coords(latCoord, lngCoord);
      } finally {
        if (input) toggleForm(true);
      }
    });
  }

  function showError(message) {
    if (!errorField) {
      console.warn('–û—à–∏–±–∫–∞ (no errorField):', message);
      return;
    }
    errorField.textContent = message;
    errorField.hidden = false;
  }

  function clearError() {
    if (!errorField) return;
    errorField.hidden = true;
    errorField.textContent = '';
  }

  // --- –ó–∞–ø—Ä–æ—Å –∫ API ---
  async function requestStatus(parkingNumber) {
    if (input) toggleForm(false, '–ó–∞–ø—Ä–æ—Å‚Ä¶');

    if (card) renderLoading();

    try {
      const response = await fetch(API_ENDPOINT, {
        method: REQUEST_METHOD,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ parkingNumber }),
      });

      if (!response.ok) {
        const text = await response.text().catch(() => '');
        throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ${response.status}${text ? `: ${text}` : ''}`);
      }

      const payload = await response.json().catch(() => null);
      const normalized = normalizePayload(payload, parkingNumber);
      renderStatus(normalized);
    } catch (err) {
      console.error(err);
      renderErrorState(err);
    } finally {
      if (input) toggleForm(true);
    }
  }

  function toggleForm(isEnabled, loadingText) {
    if (!form) return;
    const inputEl = form.querySelector('#parking-number') || form.querySelector('input');
    const submitButton = form.querySelector('.lookup__submit') || form.querySelector('button[type="submit"]');

    if (inputEl) inputEl.disabled = !isEnabled;
    if (submitButton) {
      submitButton.disabled = !isEnabled;
      if (!isEnabled) {
        submitButton.dataset.originalText = submitButton.textContent;
        submitButton.textContent = loadingText ?? '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶';
      } else if (submitButton.dataset.originalText) {
        submitButton.textContent = submitButton.dataset.originalText;
        delete submitButton.dataset.originalText;
      }
    }
  }

  function renderLoading() {
    if (!card) return;
    card.innerHTML = `
      <div class="status-card">
        <div class="status-card__placeholder">
          <span class="status-card__emoji" aria-hidden="true">‚è≥</span>
          <p class="status-card__text">–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏‚Ä¶</p>
        </div>
      </div>
    `;
  }

  function renderErrorState(error) {
    if (!card) {
      console.warn('renderErrorState:', error);
      return;
    }
    card.innerHTML = `
      <div class="status-card status-card--danger">
        <div class="status-card__placeholder">
          <span class="status-card__emoji" aria-hidden="true">‚ö†Ô∏è</span>
          <p class="status-card__text">${escapeHtml(error?.message ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')}</p>
        </div>
      </div>
    `;
  }

  function renderStatus(data) {
    latestNearestParking = null;
    latestEpoData = null;
    if (!card) {
      console.warn('renderStatus: card –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', data);
      return;
    }

    const badge = STATUS_PRESETS[data.statusPreset] ?? STATUS_PRESETS.unknown;

    const statsHtml = [
      { label: '–ó–∞–Ω—è—Ç–æ', value: formatNumber(data.occupiedSpots, '--') },
      { label: '–°–≤–æ–±–æ–¥–Ω–æ', value: formatNumber(data.freeSpots, '--') },
      { label: '–í—Å–µ–≥–æ –º–µ—Å—Ç', value: formatNumber(data.totalSpots, '--') },
      { label: '–ó–∞–≥—Ä—É–∑–∫–∞', value: data.occupancyPercent != null ? `${data.occupancyPercent}%` : '--' },
    ]
      .filter((stat) => stat.value !== '--' || stat.label === '–ó–∞–≥—Ä—É–∑–∫–∞')
      .map(
        (stat) => `
          <div class="status-card__stat">
            <span class="status-card__stat-label">${stat.label}</span>
            <span class="status-card__stat-value">${stat.value}</span>
          </div>
        `
      )
      .join('');

    card.innerHTML = `
      <div class="status-card ${badge.cssClass}">
        <div class="status-card__header">
          <div>
            <p class="status-card__badge">${badge.emoji} ${badge.label}</p>
            <h2 class="status-card__title">–ü–∞—Ä–∫–æ–≤–∫–∞ ‚Ññ${escapeHtml(String(data.parkingNumber ?? '‚Äî'))}</h2>
            <p class="status-card__subtitle">${escapeHtml(data.humanStatus ?? '')}</p>
          </div>
          <div class="status-card__meta">
            ${data.updatedAtText ? `<span class="status-card__meta-time">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${escapeHtml(data.updatedAtText)}</span>` : ''}
          </div>
        </div>

        <div class="status-card__progress" role="img" aria-label="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å ${data.occupancyPercent ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}%">
          <div class="status-card__progress-fill" style="width: ${Math.min(data.occupancyPercent ?? 0, 100)}%"></div>
        </div>

        <div class="status-card__stats">
          ${statsHtml}
        </div>

        <footer class="status-card__footer">
          ${data.updatedAtRelative ? `–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: ${escapeHtml(data.updatedAtRelative)}` : '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π API.'}
        </footer>
      </div>
    `;
  }

  // --- Payload normalization / —É—Ç–∏–ª–∏—Ç—ã ---
  function normalizePayload(payload, fallbackParkingNumber) {
    const raw = payload?.data ?? payload;

    if (!raw || typeof raw !== 'object') {
      throw new Error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.');
    }

    const total = coerceNumber(raw.totalSpots ?? raw.total ?? raw.capacity ?? raw.maxCapacity);
    const occupied = coerceNumber(raw.occupiedSpots ?? raw.occupied ?? raw.busy ?? raw.taken);
    const free = coerceNumber(raw.freeSpots ?? raw.free ?? raw.available ?? raw.vacant);

    let occupancyPercent = null;
    if (raw.occupancy != null) occupancyPercent = normalizePercent(raw.occupancy);
    if (occupancyPercent == null && raw.occupancyPercent != null) occupancyPercent = normalizePercent(raw.occupancyPercent);
    if (occupancyPercent == null && occupied != null && total != null && total > 0) occupancyPercent = Math.round((occupied / total) * 100);
    if (occupancyPercent == null && free != null && total != null && total > 0) occupancyPercent = Math.round(((total - free) / total) * 100);

    let resolvedOccupied = occupied;
    let resolvedFree = free;

    if (resolvedOccupied == null && total != null && free != null) resolvedOccupied = Math.max(total - free, 0);
    if (resolvedFree == null && total != null && occupied != null) resolvedFree = Math.max(total - occupied, 0);

    const statusRaw = (raw.status ?? raw.state ?? '').toString().toLowerCase();
    const statusPreset = chooseStatusPreset(statusRaw, occupancyPercent);
    const humanStatus = formatHumanStatus(statusRaw, statusPreset, occupancyPercent);
    const updatedAt = raw.updatedAt ?? raw.timestamp ?? raw.lastUpdated;

    return {
      parkingNumber: raw.parkingNumber ?? raw.zone ?? fallbackParkingNumber,
      totalSpots: total ?? null,
      occupiedSpots: resolvedOccupied ?? null,
      freeSpots: resolvedFree ?? (total != null && resolvedOccupied != null ? Math.max(total - resolvedOccupied, 0) : null),
      occupancyPercent: occupancyPercent ?? null,
      statusPreset,
      humanStatus,
      updatedAtText: updatedAt ? formatDate(updatedAt) : '',
      updatedAtRelative: updatedAt ? formatRelativeTime(updatedAt) : '',
    };
  }

  function chooseStatusPreset(statusRaw, occupancyPercent) {
    if (statusRaw.includes('free') || statusRaw.includes('–Ω–∏–∑')) return 'low';
    if (statusRaw.includes('mid') || statusRaw.includes('—Å—Ä–µ–¥')) return 'medium';
    if (statusRaw.includes('high') || statusRaw.includes('–ø–µ—Ä–µ–ø–æ–ª–Ω') || statusRaw.includes('–∑–∞–∫—Ä—ã')) return 'high';

    if (typeof occupancyPercent === 'number') {
      if (occupancyPercent < 60) return 'low';
      if (occupancyPercent < 85) return 'medium';
      return 'high';
    }

    return 'unknown';
  }

  function formatHumanStatus(statusRaw, preset, percent) {
    if (statusRaw) return capitalize(statusRaw);
    switch (preset) {
      case 'low': return percent != null ? `–°–≤–æ–±–æ–¥–Ω–æ ¬∑ ${percent}% –∑–∞–Ω—è—Ç–æ` : '–ü–∞—Ä–∫–æ–≤–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞';
      case 'medium': return percent != null ? `–ü–ª–æ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ¬∑ ${percent}% –∑–∞–Ω—è—Ç–æ` : '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è';
      case 'high': return percent != null ? `–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ ¬∑ ${percent}% –∑–∞–Ω—è—Ç–æ` : '–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –ø–æ—á—Ç–∏ –Ω–µ—Ç';
      default: return '–°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    }
  }

  function normalizePercent(value) {
    if (value == null) return null;
    if (typeof value === 'number' && Number.isFinite(value)) return clamp(Math.round(value <= 1 ? value * 100 : value), 0, 100);
    const numeric = parseFloat(String(value).replace(',', '.'));
    if (!Number.isNaN(numeric)) {
      const scaled = numeric <= 1 ? numeric * 100 : numeric;
      return clamp(Math.round(scaled), 0, 100);
    }
    return null;
  }

  function coerceNumber(value) {
    if (value == null) return null;
    const number = Number(value);
    return Number.isFinite(number) ? number : null;
  }

  function formatNumber(value, fallback = '') {
    if (value == null) return fallback;
    return new Intl.NumberFormat('ru-RU').format(value);
  }

  function formatDate(input) {
    const date = toDate(input);
    if (!date) return '';
    return date.toLocaleString('ru-RU', { day: '2-digit', month: 'short', hour: '2-digit', minute: '2-digit' });
  }

  function formatRelativeTime(input) {
    const date = toDate(input);
    if (!date) return '';
    const diffMs = Date.now() - date.getTime();
    const diffMinutes = Math.round(diffMs / 60000);
    if (diffMinutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMinutes < 60) return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    const diffHours = Math.round(diffMinutes / 60);
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    const diffDays = Math.round(diffHours / 24);
    return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  }

  function toDate(value) {
    if (value instanceof Date) return value;
    const parsed = new Date(value);
    return Number.isNaN(parsed.getTime()) ? null : parsed;
  }

  function clamp(value, min, max) { return Math.min(Math.max(value, min), max); }
  function capitalize(text) { if (!text) return ''; return String(text).charAt(0).toUpperCase() + String(text).slice(1); }
  function escapeHtml(text) {
    if (text == null) return '';
    return String(text).replace(/[&<>"']/g, (m) => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'}[m]));
  }

  function parseCoordinates(value) {
    if (!value) return null;
    const normalized = value.replace(/\s+/g, ' ').trim();
    const parts = normalized.split(/[,\s]+/).filter(Boolean);
    if (parts.length !== 2) return null;
    const lat = Number(parts[0]);
    const lng = Number(parts[1]);
    if (!Number.isFinite(lat) || !Number.isFinite(lng)) return null;
    if (lat < -90 || lat > 90 || lng < -180 || lng > 180) return null;
    return [lat, lng];
  }

  function renderNearestParkingCard(parking, epoData) {
    if (!card) return;
    if (!parking) {
      card.innerHTML = `
        <div class="status-card status-card--empty">
          <div class="status-card__placeholder">
            <span class="status-card__emoji" aria-hidden="true">üöó</span>
            <p class="status-card__text">–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä–∫–æ–≤–∫–∏.</p>
          </div>
        </div>
      `;
      return;
    }

    const pricePieces = [];
    if (parking.price_per_hour != null) {
      pricePieces.push(`${escapeHtml(formatNumber(parking.price_per_hour))} ‚ÇΩ/—á`);
    }
    if (parking.price_comment) {
      pricePieces.push(escapeHtml(parking.price_comment));
    }
    const priceText = pricePieces.length ? pricePieces.join(' ¬∑ ') : '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

    const rawCapacity = parking.capacity ?? parking.total_spaces;
    const capacityValue = Number.isFinite(Number(rawCapacity))
      ? formatNumber(Number(rawCapacity))
      : String(rawCapacity ?? '–Ω/–¥');
    const distanceMeters = Number(parking.distance_to_request_m);
    const distanceToPoint = Number.isFinite(distanceMeters)
      ? `${escapeHtml(formatNumber(Math.round(distanceMeters)))} –º`
      : '–Ω/–¥';
    const centerKm = Number(parking.distance_to_center_km);
    const distanceToCenter = Number.isFinite(centerKm)
      ? `${escapeHtml(centerKm.toFixed(2))} –∫–º`
      : '–Ω/–¥';

    let epoValue = '—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è‚Ä¶';
    if (epoData?.error) {
      epoValue = '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
    } else if (epoData && !epoData.loading) {
      const percent = epoData.occupancy_percentage != null ? `${epoData.occupancy_percentage}%` : '‚Äî';
      epoValue = `${percent} ¬∑ ${epoData.occupancy_level ?? '–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö'}`;
    }
    const epoDisplay = escapeHtml(epoValue);

    card.innerHTML = `
      <div class="status-card">
        <div class="status-card__header">
          <div>
            <p class="status-card__badge">üÖøÔ∏è –ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞</p>
            <h2 class="status-card__title">${escapeHtml(parking.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</h2>
            <p class="status-card__subtitle">${priceText}</p>
          </div>
          <div class="status-card__meta">
            <span class="status-card__meta-time">–î–æ —Ü–µ–Ω—Ç—Ä–∞: ${distanceToCenter}</span>
          </div>
        </div>

        <div class="status-card__stats">
          <div class="status-card__stat">
            <span class="status-card__stat-label">–î–æ —Ç–æ—á–∫–∏</span>
            <span class="status-card__stat-value">${distanceToPoint}</span>
          </div>
          <div class="status-card__stat">
            <span class="status-card__stat-label">–ú–µ—Å—Ç –≤—Å–µ–≥–æ</span>
            <span class="status-card__stat-value">${escapeHtml(capacityValue)}</span>
          </div>
          <div class="status-card__stat">
            <span class="status-card__stat-label">–û—Ü–µ–Ω–∫–∞ EPO</span>
            <span class="status-card__stat-value">${epoDisplay}</span>
          </div>
        </div>

        <footer class="status-card__footer">
          –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${escapeHtml(parking.coordinates ?? '–Ω/–¥')}
        </footer>
      </div>
    `;
  }

  function renderEpoResult(data) {
    const container = document.getElementById('epo-result');
    if (!container) return;

    latestEpoData = data;

    if (data?.loading) {
      container.innerHTML = `
        <div class="epo-result">
          <p>–ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏‚Ä¶</p>
        </div>
      `;
      if (latestNearestParking) renderNearestParkingCard(latestNearestParking, data);
      return;
    }

    const paramsText = data?.parameters
      ? `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ü–µ–Ω–∞ ${escapeHtml(String(data.parameters.cost ?? '–Ω/–¥'))} ‚ÇΩ/—á ¬∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${escapeHtml(String(data.parameters.distance ?? '–Ω/–¥'))} –∫–º ¬∑ –º–µ—Å—Ç–∞ ${escapeHtml(String(data.parameters.spots ?? '–Ω/–¥'))}`
      : '';

    if (!data || data.error) {
      container.innerHTML = `
        <div class="epo-result epo-result--error">
          <p>${escapeHtml(data?.error ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏')}</p>
          ${paramsText ? `<p class="epo-result__params">${paramsText}</p>` : ''}
        </div>
      `;
      if (latestNearestParking) renderNearestParkingCard(latestNearestParking, data);
      return;
    }

    container.innerHTML = `
      <div class="epo-result">
        <h3 class="epo-result__title">–û—Ü–µ–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ (EPO)</h3>
        <div class="epo-result__grid">
          <div>
            <span class="epo-result__label">–£—Ä–æ–≤–µ–Ω—å:</span>
            <span class="epo-result__value">${escapeHtml(data.occupancy_level ?? '–Ω/–¥')}</span>
          </div>
          <div>
            <span class="epo-result__label">–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å:</span>
            <span class="epo-result__value">${data.occupancy_percentage != null ? `${data.occupancy_percentage}%` : '–Ω/–¥'}</span>
          </div>
          <div>
            <span class="epo-result__label">–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏:</span>
            <span class="epo-result__value">${escapeHtml(data.time_context ?? '–Ω/–¥')}</span>
          </div>
        </div>
        ${paramsText ? `<div class="epo-result__params">${paramsText}</div>` : ''}
      </div>
    `;

    if (latestNearestParking) renderNearestParkingCard(latestNearestParking, data);
  }

async function get_park_on_coords(lat, lng, options = {}) {
  if (!Number.isFinite(Number(lat)) || !Number.isFinite(Number(lng))) {
    console.warn('–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∫–æ–≤–∫–∏:', lat, lng);
    return null;
  }

  const defaultUrl = `${window.location.origin.replace(/\/$/, '')}/api/parking/nearest`;
  const serverUrl = options.serverUrl ?? defaultUrl;

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É "lat,lng"
  const coordsStr = `${lat},${lng}`;

  let responseData;
  try {
    const url = new URL(serverUrl, window.location.origin);
    url.searchParams.append('coordinates', coordsStr);

    const resp = await fetch(url.toString(), { method: 'GET' });
    if (!resp.ok) {
      console.warn('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', resp.status);
      return null;
    }

    responseData = await resp.json();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É nearest:', err);
    return null;
  }

  if (!responseData || !responseData.parking) {
    console.warn('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∫–æ–≤–∫–µ');
    return null;
  }

  const [latStr, lngStr] = String(responseData.parking.coordinates)
    .split(',')
    .map((part) => part.trim());

  const nearest = {
    id: responseData.parking.name ?? responseData.parking.id ?? 'nearest-parking',
    name: responseData.parking.name ?? '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞',
    lat: Number(latStr),
    lng: Number(lngStr),
    distance: responseData.parking.distance_to_request_m,
    raw: responseData.parking,
  };

  latestNearestParking = nearest.raw;
  latestEpoData = null;
  renderNearestParkingCard(latestNearestParking, latestEpoData);

  const epoParams = {
    cost: Number(nearest.raw.price_per_hour ?? 0),
    distance: Number(nearest.raw.distance_to_center_km ?? 0),
    spots: Number(nearest.raw.capacity ?? 0),
  };

  renderEpoResult({ loading: true, parameters: epoParams });

  try {
    const epoUrl = `${window.location.origin.replace(/\/$/, '')}/api/parking/occupancy`;
    const epoResponse = await fetch(
      `${epoUrl}?` + new URLSearchParams({
        cost: String(epoParams.cost),
        distance: String(epoParams.distance),
        spots: String(epoParams.spots),
      }),
      { method: 'GET' },
    );

    if (epoResponse.ok) {
      const epoData = await epoResponse.json();
      renderEpoResult({ ...epoData, parameters: epoParams });
    } else {
      renderEpoResult({ error: '–°–µ—Ä–≤–∏—Å EPO –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É', parameters: epoParams });
    }
  } catch (err) {
    console.warn('–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É EPO:', err);
    renderEpoResult({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç EPO', parameters: epoParams });
  }

  // --- –ú–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ ---
  if (typeof window._parkingApp?.addMarker === 'function') {
    window.__nearestParkingMarker = null;
    clearMarkers();

    const priceText = nearest.raw.price_per_hour != null
      ? `${nearest.raw.price_per_hour} ‚ÇΩ/—á–∞—Å`
      : nearest.raw.price_comment ?? '';

    const popupText = [nearest.name, priceText, nearest.distance != null ? `‚âà ${Math.round(nearest.distance)} –º` : null]
      .filter(Boolean)
      .join(' ¬∑ ');

    window.__nearestParkingMarker = window._parkingApp.addMarker(
      nearest.lat,
      nearest.lng,
      popupText,
    );

    if (window.map) {
      try {
        window.map.setCenter([nearest.lng, nearest.lat], { duration: 600, easing: 'easeOutCubic' });
        window.map.setZoom(17, { duration: 600, easing: 'easeOutCubic' });
      } catch (err) {
        console.warn('–û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', err);
      }
    }
  }

  return nearest;
}



  // --- MapGL helpers: –º–∞—Ä–∫–µ—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ ---
  function addMarker(lat, lng, text = '') {
    if (!map) { console.warn('map –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'); return null; }
	clearMarkers();
    const marker = new mapgl.Marker(map, {
      coordinates: [parseFloat(lng), parseFloat(lat)],
      icon: 'https://docs.2gis.com/img/mapgl/marker.svg',
    });
    if (text) {
      marker.on('click', () => {
        console.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∫–æ–≤–∫–µ:', text);
      });
    }
    markers.push(marker);
    return marker;
  }

  // –í–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–∞: –ø—Ä–∏ –∫–ª–∏–∫–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º –∫–∞—Ä—Ç—É –∏ –≤—ã–∑—ã–≤–∞–µ–º get_park_on_coords(lat, lng)
  function enableClickToZoomAndQuery(mapInstance) {
    if (!mapInstance || typeof mapInstance.on !== 'function') {
      console.error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω –≤ enableClickToZoomAndQuery');
      return;
    }

    let isAnimating = false;

    mapInstance.on('click', (e) => {
      let lng, lat;

      // MapGL event: e.lngLat –∏–ª–∏ e.lngLat.toArray()
      if (e && e.lngLat && typeof e.lngLat.lng !== 'undefined') {
        lng = e.lngLat.lng;
        lat = e.lngLat.lat;
      } else if (e && Array.isArray(e.lngLat) && e.lngLat.length >= 2) {
        lng = e.lngLat[0];
        lat = e.lngLat[1];
      } else {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è', e);
        return;
      }

      // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ –ø–æ—Ä—è–¥–∫–µ (lat, lng)
      let nearest = get_park_on_coords(lat, lng);
	  
	  if (isAnimating) return;
      isAnimating = true;

      const currentZoom = typeof mapInstance.getZoom === 'function' ? mapInstance.getZoom() : 12;
      const targetZoom = Math.min(currentZoom + 3, 18);

      // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑—É–º (MapGL –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç setCenter/setZoom —Å –æ–ø—Ü–∏—è–º–∏)
      try {
        if (typeof mapInstance.setCenter === 'function') {
          mapInstance.setCenter([nearest.lng, nearest.lat], { easing: 'easeOutCubic', duration: 700 });
        }
        if (typeof mapInstance.setZoom === 'function') {
          mapInstance.setZoom(targetZoom, { easing: 'easeOutCubic', duration: 700 });
        }
      } catch (err) {
        console.warn('–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', err);
      }

      // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(() => { isAnimating = false; }, 800);
    });
  }

  // –í–∫–ª—é—á–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
  if (map) enableClickToZoomAndQuery(map);

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ window –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
  window._parkingApp = {
    config: HACK_CONFIG,
    addMarker,
    requestStatus,
    normalizePayload,
    map,
    clearMarkers,
  };
}); // DOMContentLoaded
